<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="52885"><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.01%)</title><rect x="0.0000%" y="501" width="0.0113%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.01%)</title><rect x="0.0000%" y="517" width="0.0132%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="527.50"></text></g><g><title>[libc.so.6] (16 samples, 0.03%)</title><rect x="0.0567%" y="421" width="0.0303%" height="15" fill="rgb(221,193,54)" fg:x="30" fg:w="16"/><text x="0.3067%" y="431.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="0.0737%" y="405" width="0.0132%" height="15" fill="rgb(248,212,6)" fg:x="39" fg:w="7"/><text x="0.3237%" y="415.50"></text></g><g><title>[libc.so.6] (43 samples, 0.08%)</title><rect x="0.0132%" y="485" width="0.0813%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="43"/><text x="0.2632%" y="495.50"></text></g><g><title>snprintf (41 samples, 0.08%)</title><rect x="0.0170%" y="469" width="0.0775%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="41"/><text x="0.2670%" y="479.50"></text></g><g><title>[libc.so.6] (40 samples, 0.08%)</title><rect x="0.0189%" y="453" width="0.0756%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="40"/><text x="0.2689%" y="463.50"></text></g><g><title>[libc.so.6] (34 samples, 0.06%)</title><rect x="0.0303%" y="437" width="0.0643%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="34"/><text x="0.2803%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (685 samples, 1.30%)</title><rect x="10.3545%" y="181" width="1.2953%" height="15" fill="rgb(218,30,26)" fg:x="5476" fg:w="685"/><text x="10.6045%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,763 samples, 5.22%)</title><rect x="6.4290%" y="197" width="5.2245%" height="15" fill="rgb(220,122,19)" fg:x="3400" fg:w="2763"/><text x="6.6790%" y="207.50">&lt;core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (4,885 samples, 9.24%)</title><rect x="2.8912%" y="213" width="9.2370%" height="15" fill="rgb(250,228,42)" fg:x="1529" fg:w="4885"/><text x="3.1412%" y="223.50">&lt;core::slice:..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (251 samples, 0.47%)</title><rect x="11.6536%" y="197" width="0.4746%" height="15" fill="rgb(240,193,28)" fg:x="6163" fg:w="251"/><text x="11.9036%" y="207.50"></text></g><g><title>onebrc::adv::reader::_{{closure}} (251 samples, 0.47%)</title><rect x="11.6536%" y="181" width="0.4746%" height="15" fill="rgb(216,20,37)" fg:x="6163" fg:w="251"/><text x="11.9036%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (251 samples, 0.47%)</title><rect x="11.6536%" y="165" width="0.4746%" height="15" fill="rgb(206,188,39)" fg:x="6163" fg:w="251"/><text x="11.9036%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (251 samples, 0.47%)</title><rect x="11.6536%" y="149" width="0.4746%" height="15" fill="rgb(217,207,13)" fg:x="6163" fg:w="251"/><text x="11.9036%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,762 samples, 12.79%)</title><rect x="2.6378%" y="229" width="12.7862%" height="15" fill="rgb(231,73,38)" fg:x="1395" fg:w="6762"/><text x="2.8878%" y="239.50">&lt;core::slice::iter:..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,743 samples, 3.30%)</title><rect x="12.1282%" y="213" width="3.2958%" height="15" fill="rgb(225,20,46)" fg:x="6414" fg:w="1743"/><text x="12.3782%" y="223.50">cor..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,743 samples, 3.30%)</title><rect x="12.1282%" y="197" width="3.2958%" height="15" fill="rgb(210,31,41)" fg:x="6414" fg:w="1743"/><text x="12.3782%" y="207.50">&lt;co..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,743 samples, 3.30%)</title><rect x="12.1282%" y="181" width="3.2958%" height="15" fill="rgb(221,200,47)" fg:x="6414" fg:w="1743"/><text x="12.3782%" y="191.50">&lt;co..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,743 samples, 3.30%)</title><rect x="12.1282%" y="165" width="3.2958%" height="15" fill="rgb(226,26,5)" fg:x="6414" fg:w="1743"/><text x="12.3782%" y="175.50">&lt;co..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,594 samples, 3.01%)</title><rect x="12.4099%" y="149" width="3.0141%" height="15" fill="rgb(249,33,26)" fg:x="6563" fg:w="1594"/><text x="12.6599%" y="159.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7,363 samples, 13.92%)</title><rect x="2.1953%" y="245" width="13.9227%" height="15" fill="rgb(235,183,28)" fg:x="1161" fg:w="7363"/><text x="2.4453%" y="255.50">core::iter::traits::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (367 samples, 0.69%)</title><rect x="15.4240%" y="229" width="0.6940%" height="15" fill="rgb(221,5,38)" fg:x="8157" fg:w="367"/><text x="15.6740%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (367 samples, 0.69%)</title><rect x="15.4240%" y="213" width="0.6940%" height="15" fill="rgb(247,18,42)" fg:x="8157" fg:w="367"/><text x="15.6740%" y="223.50"></text></g><g><title>onebrc::adv::reader::_{{closure}} (367 samples, 0.69%)</title><rect x="15.4240%" y="197" width="0.6940%" height="15" fill="rgb(241,131,45)" fg:x="8157" fg:w="367"/><text x="15.6740%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (367 samples, 0.69%)</title><rect x="15.4240%" y="181" width="0.6940%" height="15" fill="rgb(249,31,29)" fg:x="8157" fg:w="367"/><text x="15.6740%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,468 samples, 14.12%)</title><rect x="2.1953%" y="277" width="14.1212%" height="15" fill="rgb(225,111,53)" fg:x="1161" fg:w="7468"/><text x="2.4453%" y="287.50">&lt;core::iter::adapters..</text></g><g><title>core::iter::traits::iterator::Iterator::find (7,468 samples, 14.12%)</title><rect x="2.1953%" y="261" width="14.1212%" height="15" fill="rgb(238,160,17)" fg:x="1161" fg:w="7468"/><text x="2.4453%" y="271.50">core::iter::traits::i..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (105 samples, 0.20%)</title><rect x="16.1180%" y="245" width="0.1985%" height="15" fill="rgb(214,148,48)" fg:x="8524" fg:w="105"/><text x="16.3680%" y="255.50"></text></g><g><title>&lt;u128 as ahash::convert::Convert&lt;[u64: 2]&gt;&gt;::convert (1,869 samples, 3.53%)</title><rect x="16.3165%" y="229" width="3.5341%" height="15" fill="rgb(232,36,49)" fg:x="8629" fg:w="1869"/><text x="16.5665%" y="239.50">&lt;u1..</text></g><g><title>ahash::operations::aesdec (2,979 samples, 5.63%)</title><rect x="19.8506%" y="229" width="5.6330%" height="15" fill="rgb(209,103,24)" fg:x="10498" fg:w="2979"/><text x="20.1006%" y="239.50">ahash::..</text></g><g><title>core::core_arch::x86::aes::_mm_aesdec_si128 (2,979 samples, 5.63%)</title><rect x="19.8506%" y="213" width="5.6330%" height="15" fill="rgb(229,88,8)" fg:x="10498" fg:w="2979"/><text x="20.1006%" y="223.50">core::c..</text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::finish (4,856 samples, 9.18%)</title><rect x="16.3165%" y="245" width="9.1822%" height="15" fill="rgb(213,181,19)" fg:x="8629" fg:w="4856"/><text x="16.5665%" y="255.50">&lt;ahash::aes_h..</text></g><g><title>ahash::operations::aesenc (8 samples, 0.02%)</title><rect x="25.4836%" y="229" width="0.0151%" height="15" fill="rgb(254,191,54)" fg:x="13477" fg:w="8"/><text x="25.7336%" y="239.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesenc_si128 (8 samples, 0.02%)</title><rect x="25.4836%" y="213" width="0.0151%" height="15" fill="rgb(241,83,37)" fg:x="13477" fg:w="8"/><text x="25.7336%" y="223.50"></text></g><g><title>ahash::operations::aesdec (102 samples, 0.19%)</title><rect x="25.4987%" y="133" width="0.1929%" height="15" fill="rgb(233,36,39)" fg:x="13485" fg:w="102"/><text x="25.7487%" y="143.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aesdec_si128 (87 samples, 0.16%)</title><rect x="25.5271%" y="117" width="0.1645%" height="15" fill="rgb(226,3,54)" fg:x="13500" fg:w="87"/><text x="25.7771%" y="127.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (183 samples, 0.35%)</title><rect x="25.4987%" y="213" width="0.3460%" height="15" fill="rgb(245,192,40)" fg:x="13485" fg:w="183"/><text x="25.7487%" y="223.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_usize (183 samples, 0.35%)</title><rect x="25.4987%" y="197" width="0.3460%" height="15" fill="rgb(238,167,29)" fg:x="13485" fg:w="183"/><text x="25.7487%" y="207.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u64 (183 samples, 0.35%)</title><rect x="25.4987%" y="181" width="0.3460%" height="15" fill="rgb(232,182,51)" fg:x="13485" fg:w="183"/><text x="25.7487%" y="191.50"></text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write_u128 (183 samples, 0.35%)</title><rect x="25.4987%" y="165" width="0.3460%" height="15" fill="rgb(231,60,39)" fg:x="13485" fg:w="183"/><text x="25.7487%" y="175.50"></text></g><g><title>ahash::aes_hash::AHasher::hash_in (183 samples, 0.35%)</title><rect x="25.4987%" y="149" width="0.3460%" height="15" fill="rgb(208,69,12)" fg:x="13485" fg:w="183"/><text x="25.7487%" y="159.50"></text></g><g><title>ahash::operations::shuffle_and_add (81 samples, 0.15%)</title><rect x="25.6916%" y="133" width="0.1532%" height="15" fill="rgb(235,93,37)" fg:x="13587" fg:w="81"/><text x="25.9416%" y="143.50"></text></g><g><title>ahash::operations::add_by_64s (81 samples, 0.15%)</title><rect x="25.6916%" y="117" width="0.1532%" height="15" fill="rgb(213,116,39)" fg:x="13587" fg:w="81"/><text x="25.9416%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (81 samples, 0.15%)</title><rect x="25.6916%" y="101" width="0.1532%" height="15" fill="rgb(222,207,29)" fg:x="13587" fg:w="81"/><text x="25.9416%" y="111.50"></text></g><g><title>ahash::operations::aesdec (478 samples, 0.90%)</title><rect x="27.9455%" y="165" width="0.9038%" height="15" fill="rgb(206,96,30)" fg:x="14779" fg:w="478"/><text x="28.1955%" y="175.50"></text></g><g><title>ahash::aes_hash::AHasher::hash_in (537 samples, 1.02%)</title><rect x="27.9455%" y="181" width="1.0154%" height="15" fill="rgb(218,138,4)" fg:x="14779" fg:w="537"/><text x="28.1955%" y="191.50"></text></g><g><title>ahash::operations::shuffle_and_add (59 samples, 0.11%)</title><rect x="28.8494%" y="165" width="0.1116%" height="15" fill="rgb(250,191,14)" fg:x="15257" fg:w="59"/><text x="29.0994%" y="175.50"></text></g><g><title>ahash::operations::shuffle (59 samples, 0.11%)</title><rect x="28.8494%" y="149" width="0.1116%" height="15" fill="rgb(239,60,40)" fg:x="15257" fg:w="59"/><text x="29.0994%" y="159.50"></text></g><g><title>core::core_arch::x86::ssse3::_mm_shuffle_epi8 (59 samples, 0.11%)</title><rect x="28.8494%" y="133" width="0.1116%" height="15" fill="rgb(206,27,48)" fg:x="15257" fg:w="59"/><text x="29.0994%" y="143.50"></text></g><g><title>ahash::operations::add_by_64s (6 samples, 0.01%)</title><rect x="28.9610%" y="149" width="0.0113%" height="15" fill="rgb(225,35,8)" fg:x="15316" fg:w="6"/><text x="29.2110%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (6 samples, 0.01%)</title><rect x="28.9610%" y="133" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="15316" fg:w="6"/><text x="29.2110%" y="143.50"></text></g><g><title>ahash::aes_hash::AHasher::hash_in_2 (7 samples, 0.01%)</title><rect x="28.9610%" y="181" width="0.0132%" height="15" fill="rgb(247,123,22)" fg:x="15316" fg:w="7"/><text x="29.2110%" y="191.50"></text></g><g><title>ahash::operations::shuffle_and_add (7 samples, 0.01%)</title><rect x="28.9610%" y="165" width="0.0132%" height="15" fill="rgb(231,138,38)" fg:x="15316" fg:w="7"/><text x="29.2110%" y="175.50"></text></g><g><title>ahash::operations::add_in_length (11 samples, 0.02%)</title><rect x="28.9742%" y="181" width="0.0208%" height="15" fill="rgb(231,145,46)" fg:x="15323" fg:w="11"/><text x="29.2242%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (11 samples, 0.02%)</title><rect x="28.9742%" y="165" width="0.0208%" height="15" fill="rgb(251,118,11)" fg:x="15323" fg:w="11"/><text x="29.2242%" y="175.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (7,001 samples, 13.24%)</title><rect x="16.3165%" y="277" width="13.2382%" height="15" fill="rgb(217,147,25)" fg:x="8629" fg:w="7001"/><text x="16.5665%" y="287.50">ahash::random_state:..</text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (7,001 samples, 13.24%)</title><rect x="16.3165%" y="261" width="13.2382%" height="15" fill="rgb(247,81,37)" fg:x="8629" fg:w="7001"/><text x="16.5665%" y="271.50">&lt;T as ahash::special..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,145 samples, 4.06%)</title><rect x="25.4987%" y="245" width="4.0560%" height="15" fill="rgb(209,12,38)" fg:x="13485" fg:w="2145"/><text x="25.7487%" y="255.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2,145 samples, 4.06%)</title><rect x="25.4987%" y="229" width="4.0560%" height="15" fill="rgb(227,1,9)" fg:x="13485" fg:w="2145"/><text x="25.7487%" y="239.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1,962 samples, 3.71%)</title><rect x="25.8448%" y="213" width="3.7099%" height="15" fill="rgb(248,47,43)" fg:x="13668" fg:w="1962"/><text x="26.0948%" y="223.50">core..</text></g><g><title>&lt;ahash::aes_hash::AHasher as core::hash::Hasher&gt;::write (1,962 samples, 3.71%)</title><rect x="25.8448%" y="197" width="3.7099%" height="15" fill="rgb(221,10,30)" fg:x="13668" fg:w="1962"/><text x="26.0948%" y="207.50">&lt;aha..</text></g><g><title>ahash::operations::read_small (296 samples, 0.56%)</title><rect x="28.9950%" y="181" width="0.5597%" height="15" fill="rgb(210,229,1)" fg:x="15334" fg:w="296"/><text x="29.2450%" y="191.50"></text></g><g><title>&lt;[u8] as ahash::convert::ReadFromSlice&gt;::read_last_u32 (45 samples, 0.09%)</title><rect x="29.4696%" y="165" width="0.0851%" height="15" fill="rgb(222,148,37)" fg:x="15585" fg:w="45"/><text x="29.7196%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (5,231 samples, 9.89%)</title><rect x="30.6590%" y="229" width="9.8913%" height="15" fill="rgb(234,67,33)" fg:x="16214" fg:w="5231"/><text x="30.9090%" y="239.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (4,856 samples, 9.18%)</title><rect x="31.3681%" y="213" width="9.1822%" height="15" fill="rgb(247,98,35)" fg:x="16589" fg:w="4856"/><text x="31.6181%" y="223.50">core::iter::t..</text></g><g><title>onebrc::adv::reader::_{{closure}} (4,856 samples, 9.18%)</title><rect x="31.3681%" y="197" width="9.1822%" height="15" fill="rgb(247,138,52)" fg:x="16589" fg:w="4856"/><text x="31.6181%" y="207.50">onebrc::adv::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,856 samples, 9.18%)</title><rect x="31.3681%" y="181" width="9.1822%" height="15" fill="rgb(213,79,30)" fg:x="16589" fg:w="4856"/><text x="31.6181%" y="191.50">core::cmp::im..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (4,856 samples, 9.18%)</title><rect x="31.3681%" y="165" width="9.1822%" height="15" fill="rgb(246,177,23)" fg:x="16589" fg:w="4856"/><text x="31.6181%" y="175.50">core::cmp::im..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,712 samples, 3.24%)</title><rect x="43.3960%" y="213" width="3.2372%" height="15" fill="rgb(230,62,27)" fg:x="22950" fg:w="1712"/><text x="43.6460%" y="223.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,220 samples, 6.09%)</title><rect x="40.5503%" y="229" width="6.0887%" height="15" fill="rgb(216,154,8)" fg:x="21445" fg:w="3220"/><text x="40.8003%" y="239.50">&lt;core::s..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (9,036 samples, 17.09%)</title><rect x="29.5547%" y="277" width="17.0861%" height="15" fill="rgb(244,35,45)" fg:x="15630" fg:w="9036"/><text x="29.8047%" y="287.50">core::iter::traits::iterat..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,036 samples, 17.09%)</title><rect x="29.5547%" y="261" width="17.0861%" height="15" fill="rgb(251,115,12)" fg:x="15630" fg:w="9036"/><text x="29.8047%" y="271.50">&lt;core::iter::adapters::enu..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9,036 samples, 17.09%)</title><rect x="29.5547%" y="245" width="17.0861%" height="15" fill="rgb(240,54,50)" fg:x="15630" fg:w="9036"/><text x="29.8047%" y="255.50">core::iter::traits::iterat..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (764 samples, 1.44%)</title><rect x="46.6427%" y="261" width="1.4446%" height="15" fill="rgb(233,84,52)" fg:x="24667" fg:w="764"/><text x="46.8927%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,183 samples, 2.24%)</title><rect x="46.6427%" y="277" width="2.2369%" height="15" fill="rgb(207,117,47)" fg:x="24667" fg:w="1183"/><text x="46.8927%" y="287.50">c..</text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (419 samples, 0.79%)</title><rect x="48.0874%" y="261" width="0.7923%" height="15" fill="rgb(249,43,39)" fg:x="25431" fg:w="419"/><text x="48.3374%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (419 samples, 0.79%)</title><rect x="48.0874%" y="245" width="0.7923%" height="15" fill="rgb(209,38,44)" fg:x="25431" fg:w="419"/><text x="48.3374%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.03%)</title><rect x="48.8872%" y="165" width="0.0265%" height="15" fill="rgb(236,212,23)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.03%)</title><rect x="48.8872%" y="149" width="0.0265%" height="15" fill="rgb(242,79,21)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.03%)</title><rect x="48.8872%" y="133" width="0.0265%" height="15" fill="rgb(211,96,35)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.03%)</title><rect x="48.8872%" y="117" width="0.0265%" height="15" fill="rgb(253,215,40)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.03%)</title><rect x="48.8872%" y="101" width="0.0265%" height="15" fill="rgb(211,81,21)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="111.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.03%)</title><rect x="48.8872%" y="85" width="0.0265%" height="15" fill="rgb(208,190,38)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="95.50"></text></g><g><title>__rdl_alloc (14 samples, 0.03%)</title><rect x="48.8872%" y="69" width="0.0265%" height="15" fill="rgb(235,213,38)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.03%)</title><rect x="48.8872%" y="53" width="0.0265%" height="15" fill="rgb(237,122,38)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="63.50"></text></g><g><title>malloc (14 samples, 0.03%)</title><rect x="48.8872%" y="37" width="0.0265%" height="15" fill="rgb(244,218,35)" fg:x="25854" fg:w="14"/><text x="49.1372%" y="47.50"></text></g><g><title>onebrc::WeatherRecord::new (16 samples, 0.03%)</title><rect x="48.8872%" y="277" width="0.0303%" height="15" fill="rgb(240,68,47)" fg:x="25854" fg:w="16"/><text x="49.1372%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (16 samples, 0.03%)</title><rect x="48.8872%" y="261" width="0.0303%" height="15" fill="rgb(210,16,53)" fg:x="25854" fg:w="16"/><text x="49.1372%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (16 samples, 0.03%)</title><rect x="48.8872%" y="245" width="0.0303%" height="15" fill="rgb(235,124,12)" fg:x="25854" fg:w="16"/><text x="49.1372%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.03%)</title><rect x="48.8872%" y="229" width="0.0303%" height="15" fill="rgb(224,169,11)" fg:x="25854" fg:w="16"/><text x="49.1372%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.03%)</title><rect x="48.8872%" y="213" width="0.0303%" height="15" fill="rgb(250,166,2)" fg:x="25854" fg:w="16"/><text x="49.1372%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.03%)</title><rect x="48.8872%" y="197" width="0.0303%" height="15" fill="rgb(242,216,29)" fg:x="25854" fg:w="16"/><text x="49.1372%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.03%)</title><rect x="48.8872%" y="181" width="0.0303%" height="15" fill="rgb(230,116,27)" fg:x="25854" fg:w="16"/><text x="49.1372%" y="191.50"></text></g><g><title>core::cmp::Ord::max (491 samples, 0.93%)</title><rect x="51.7368%" y="261" width="0.9284%" height="15" fill="rgb(228,99,48)" fg:x="27361" fg:w="491"/><text x="51.9868%" y="271.50"></text></g><g><title>core::cmp::max_by (491 samples, 0.93%)</title><rect x="51.7368%" y="245" width="0.9284%" height="15" fill="rgb(253,11,6)" fg:x="27361" fg:w="491"/><text x="51.9868%" y="255.50"></text></g><g><title>onebrc::WeatherRecord::update (2,461 samples, 4.65%)</title><rect x="48.9175%" y="277" width="4.6535%" height="15" fill="rgb(247,143,39)" fg:x="25870" fg:w="2461"/><text x="49.1675%" y="287.50">onebr..</text></g><g><title>core::cmp::Ord::min (479 samples, 0.91%)</title><rect x="52.6652%" y="261" width="0.9057%" height="15" fill="rgb(236,97,10)" fg:x="27852" fg:w="479"/><text x="52.9152%" y="271.50"></text></g><g><title>core::cmp::min_by (479 samples, 0.91%)</title><rect x="52.6652%" y="245" width="0.9057%" height="15" fill="rgb(233,208,19)" fg:x="27852" fg:w="479"/><text x="52.9152%" y="255.50"></text></g><g><title>[libc.so.6] (64 samples, 0.12%)</title><rect x="53.7714%" y="181" width="0.1210%" height="15" fill="rgb(216,164,2)" fg:x="28437" fg:w="64"/><text x="54.0214%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="53.8811%" y="165" width="0.0113%" height="15" fill="rgb(220,129,5)" fg:x="28495" fg:w="6"/><text x="54.1311%" y="175.50"></text></g><g><title>__libc_pread (91 samples, 0.17%)</title><rect x="53.7241%" y="197" width="0.1721%" height="15" fill="rgb(242,17,10)" fg:x="28412" fg:w="91"/><text x="53.9741%" y="207.50"></text></g><g><title>onebrc::adv::get_aligned_buffer (211 samples, 0.40%)</title><rect x="53.5710%" y="277" width="0.3990%" height="15" fill="rgb(242,107,0)" fg:x="28331" fg:w="211"/><text x="53.8210%" y="287.50"></text></g><g><title>std::os::unix::fs::FileExt::read_exact_at (130 samples, 0.25%)</title><rect x="53.7241%" y="261" width="0.2458%" height="15" fill="rgb(251,28,31)" fg:x="28412" fg:w="130"/><text x="53.9741%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (130 samples, 0.25%)</title><rect x="53.7241%" y="245" width="0.2458%" height="15" fill="rgb(233,223,10)" fg:x="28412" fg:w="130"/><text x="53.9741%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::read_at (130 samples, 0.25%)</title><rect x="53.7241%" y="229" width="0.2458%" height="15" fill="rgb(215,21,27)" fg:x="28412" fg:w="130"/><text x="53.9741%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_at (130 samples, 0.25%)</title><rect x="53.7241%" y="213" width="0.2458%" height="15" fill="rgb(232,23,21)" fg:x="28412" fg:w="130"/><text x="53.9741%" y="223.50"></text></g><g><title>std::sys::unix::cvt (39 samples, 0.07%)</title><rect x="53.8962%" y="197" width="0.0737%" height="15" fill="rgb(244,5,23)" fg:x="28503" fg:w="39"/><text x="54.1462%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,112 samples, 2.10%)</title><rect x="63.5416%" y="245" width="2.1027%" height="15" fill="rgb(226,81,46)" fg:x="33604" fg:w="1112"/><text x="63.7916%" y="255.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,376 samples, 4.49%)</title><rect x="63.5303%" y="261" width="4.4928%" height="15" fill="rgb(247,70,30)" fg:x="33598" fg:w="2376"/><text x="63.7803%" y="271.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (1,258 samples, 2.38%)</title><rect x="65.6443%" y="245" width="2.3787%" height="15" fill="rgb(212,68,19)" fg:x="34716" fg:w="1258"/><text x="65.8943%" y="255.50">&lt;c..</text></g><g><title>onebrc::adv::parse_ascii_digits (8,794 samples, 16.63%)</title><rect x="53.9699%" y="277" width="16.6285%" height="15" fill="rgb(240,187,13)" fg:x="28542" fg:w="8794"/><text x="54.2199%" y="287.50">onebrc::adv::parse_ascii_d..</text></g><g><title>core::num::&lt;impl i32&gt;::pow (1,359 samples, 2.57%)</title><rect x="68.0287%" y="261" width="2.5697%" height="15" fill="rgb(223,113,26)" fg:x="35977" fg:w="1359"/><text x="68.2787%" y="271.50">co..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2,359 samples, 4.46%)</title><rect x="81.3747%" y="181" width="4.4606%" height="15" fill="rgb(206,192,2)" fg:x="43035" fg:w="2359"/><text x="81.6247%" y="191.50">&lt;hash..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (413 samples, 0.78%)</title><rect x="85.0544%" y="165" width="0.7809%" height="15" fill="rgb(241,108,4)" fg:x="44981" fg:w="413"/><text x="85.3044%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (449 samples, 0.85%)</title><rect x="85.8466%" y="165" width="0.8490%" height="15" fill="rgb(247,173,49)" fg:x="45400" fg:w="449"/><text x="86.0966%" y="175.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (449 samples, 0.85%)</title><rect x="85.8466%" y="149" width="0.8490%" height="15" fill="rgb(224,114,35)" fg:x="45400" fg:w="449"/><text x="86.0966%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (449 samples, 0.85%)</title><rect x="85.8466%" y="133" width="0.8490%" height="15" fill="rgb(245,159,27)" fg:x="45400" fg:w="449"/><text x="86.0966%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (449 samples, 0.85%)</title><rect x="85.8466%" y="117" width="0.8490%" height="15" fill="rgb(245,172,44)" fg:x="45400" fg:w="449"/><text x="86.0966%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (527 samples, 1.00%)</title><rect x="86.6957%" y="165" width="0.9965%" height="15" fill="rgb(236,23,11)" fg:x="45849" fg:w="527"/><text x="86.9457%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (527 samples, 1.00%)</title><rect x="86.6957%" y="149" width="0.9965%" height="15" fill="rgb(205,117,38)" fg:x="45849" fg:w="527"/><text x="86.9457%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (527 samples, 1.00%)</title><rect x="86.6957%" y="133" width="0.9965%" height="15" fill="rgb(237,72,25)" fg:x="45849" fg:w="527"/><text x="86.9457%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (527 samples, 1.00%)</title><rect x="86.6957%" y="117" width="0.9965%" height="15" fill="rgb(244,70,9)" fg:x="45849" fg:w="527"/><text x="86.9457%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,465 samples, 2.77%)</title><rect x="85.8466%" y="181" width="2.7702%" height="15" fill="rgb(217,125,39)" fg:x="45400" fg:w="1465"/><text x="86.0966%" y="191.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (489 samples, 0.92%)</title><rect x="87.6922%" y="165" width="0.9246%" height="15" fill="rgb(235,36,10)" fg:x="46376" fg:w="489"/><text x="87.9422%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (489 samples, 0.92%)</title><rect x="87.6922%" y="149" width="0.9246%" height="15" fill="rgb(251,123,47)" fg:x="46376" fg:w="489"/><text x="87.9422%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (489 samples, 0.92%)</title><rect x="87.6922%" y="133" width="0.9246%" height="15" fill="rgb(221,13,13)" fg:x="46376" fg:w="489"/><text x="87.9422%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (3,952 samples, 7.47%)</title><rect x="88.6168%" y="181" width="7.4728%" height="15" fill="rgb(238,131,9)" fg:x="46865" fg:w="3952"/><text x="88.8668%" y="191.50">hashbrown:..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,872 samples, 3.54%)</title><rect x="96.0915%" y="181" width="3.5398%" height="15" fill="rgb(211,50,8)" fg:x="50818" fg:w="1872"/><text x="96.3415%" y="191.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,872 samples, 3.54%)</title><rect x="96.0915%" y="165" width="3.5398%" height="15" fill="rgb(245,182,24)" fg:x="50818" fg:w="1872"/><text x="96.3415%" y="175.50">cor..</text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="99.6143%" y="149" width="0.0170%" height="15" fill="rgb(242,14,37)" fg:x="52681" fg:w="9"/><text x="99.8643%" y="159.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (15,500 samples, 29.31%)</title><rect x="70.5985%" y="277" width="29.3089%" height="15" fill="rgb(246,228,12)" fg:x="37336" fg:w="15500"/><text x="70.8485%" y="287.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::ge..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15,500 samples, 29.31%)</title><rect x="70.5985%" y="261" width="29.3089%" height="15" fill="rgb(213,55,15)" fg:x="37336" fg:w="15500"/><text x="70.8485%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (15,500 samples, 29.31%)</title><rect x="70.5985%" y="245" width="29.3089%" height="15" fill="rgb(209,9,3)" fg:x="37336" fg:w="15500"/><text x="70.8485%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (15,093 samples, 28.54%)</title><rect x="71.3681%" y="229" width="28.5393%" height="15" fill="rgb(230,59,30)" fg:x="37743" fg:w="15093"/><text x="71.6181%" y="239.50">hashbrown::raw::RawTable&lt;T,A&gt;::get_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15,093 samples, 28.54%)</title><rect x="71.3681%" y="213" width="28.5393%" height="15" fill="rgb(209,121,21)" fg:x="37743" fg:w="15093"/><text x="71.6181%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15,093 samples, 28.54%)</title><rect x="71.3681%" y="197" width="28.5393%" height="15" fill="rgb(220,109,13)" fg:x="37743" fg:w="15093"/><text x="71.6181%" y="207.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (146 samples, 0.28%)</title><rect x="99.6313%" y="181" width="0.2761%" height="15" fill="rgb(232,18,1)" fg:x="52690" fg:w="146"/><text x="99.8813%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (146 samples, 0.28%)</title><rect x="99.6313%" y="165" width="0.2761%" height="15" fill="rgb(215,41,42)" fg:x="52690" fg:w="146"/><text x="99.8813%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (146 samples, 0.28%)</title><rect x="99.6313%" y="149" width="0.2761%" height="15" fill="rgb(224,123,36)" fg:x="52690" fg:w="146"/><text x="99.8813%" y="159.50"></text></g><g><title>std::panic::catch_unwind (52,786 samples, 99.81%)</title><rect x="0.1059%" y="405" width="99.8128%" height="15" fill="rgb(240,125,3)" fg:x="56" fg:w="52786"/><text x="0.3559%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (52,786 samples, 99.81%)</title><rect x="0.1059%" y="389" width="99.8128%" height="15" fill="rgb(205,98,50)" fg:x="56" fg:w="52786"/><text x="0.3559%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (52,786 samples, 99.81%)</title><rect x="0.1059%" y="373" width="99.8128%" height="15" fill="rgb(205,185,37)" fg:x="56" fg:w="52786"/><text x="0.3559%" y="383.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (52,786 samples, 99.81%)</title><rect x="0.1059%" y="357" width="99.8128%" height="15" fill="rgb(238,207,15)" fg:x="56" fg:w="52786"/><text x="0.3559%" y="367.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (52,786 samples, 99.81%)</title><rect x="0.1059%" y="341" width="99.8128%" height="15" fill="rgb(213,199,42)" fg:x="56" fg:w="52786"/><text x="0.3559%" y="351.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (52,786 samples, 99.81%)</title><rect x="0.1059%" y="325" width="99.8128%" height="15" fill="rgb(235,201,11)" fg:x="56" fg:w="52786"/><text x="0.3559%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>onebrc::adv::process::_{{closure}}::_{{closure}} (52,785 samples, 99.81%)</title><rect x="0.1078%" y="309" width="99.8109%" height="15" fill="rgb(207,46,11)" fg:x="57" fg:w="52785"/><text x="0.3578%" y="319.50">onebrc::adv::process::_{{closure}}::_{{closure}}</text></g><g><title>onebrc::adv::reader (52,785 samples, 99.81%)</title><rect x="0.1078%" y="293" width="99.8109%" height="15" fill="rgb(241,35,35)" fg:x="57" fg:w="52785"/><text x="0.3578%" y="303.50">onebrc::adv::reader</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.01%)</title><rect x="99.9073%" y="277" width="0.0113%" height="15" fill="rgb(243,32,47)" fg:x="52836" fg:w="6"/><text x="100.1573%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.01%)</title><rect x="99.9073%" y="261" width="0.0113%" height="15" fill="rgb(247,202,23)" fg:x="52836" fg:w="6"/><text x="100.1573%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.01%)</title><rect x="99.9073%" y="245" width="0.0113%" height="15" fill="rgb(219,102,11)" fg:x="52836" fg:w="6"/><text x="100.1573%" y="255.50"></text></g><g><title>malloc (6 samples, 0.01%)</title><rect x="99.9225%" y="373" width="0.0113%" height="15" fill="rgb(243,110,44)" fg:x="52844" fg:w="6"/><text x="100.1725%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (52,797 samples, 99.83%)</title><rect x="0.1040%" y="469" width="99.8336%" height="15" fill="rgb(222,74,54)" fg:x="55" fg:w="52797"/><text x="0.3540%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (52,797 samples, 99.83%)</title><rect x="0.1040%" y="453" width="99.8336%" height="15" fill="rgb(216,99,12)" fg:x="55" fg:w="52797"/><text x="0.3540%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (52,797 samples, 99.83%)</title><rect x="0.1040%" y="437" width="99.8336%" height="15" fill="rgb(226,22,26)" fg:x="55" fg:w="52797"/><text x="0.3540%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (52,797 samples, 99.83%)</title><rect x="0.1040%" y="421" width="99.8336%" height="15" fill="rgb(217,163,10)" fg:x="55" fg:w="52797"/><text x="0.3540%" y="431.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (10 samples, 0.02%)</title><rect x="99.9187%" y="405" width="0.0189%" height="15" fill="rgb(213,25,53)" fg:x="52842" fg:w="10"/><text x="100.1687%" y="415.50"></text></g><g><title>pthread_getattr_np (10 samples, 0.02%)</title><rect x="99.9187%" y="389" width="0.0189%" height="15" fill="rgb(252,105,26)" fg:x="52842" fg:w="10"/><text x="100.1687%" y="399.50"></text></g><g><title>[libc.so.6] (52,854 samples, 99.94%)</title><rect x="0.0132%" y="517" width="99.9414%" height="15" fill="rgb(220,39,43)" fg:x="7" fg:w="52854"/><text x="0.2632%" y="527.50">[libc.so.6]</text></g><g><title>[libc.so.6] (52,854 samples, 99.94%)</title><rect x="0.0132%" y="501" width="99.9414%" height="15" fill="rgb(229,68,48)" fg:x="7" fg:w="52854"/><text x="0.2632%" y="511.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (52,806 samples, 99.85%)</title><rect x="0.1040%" y="485" width="99.8506%" height="15" fill="rgb(252,8,32)" fg:x="55" fg:w="52806"/><text x="0.3540%" y="495.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (9 samples, 0.02%)</title><rect x="99.9376%" y="469" width="0.0170%" height="15" fill="rgb(223,20,43)" fg:x="52852" fg:w="9"/><text x="100.1876%" y="479.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (9 samples, 0.02%)</title><rect x="99.9376%" y="453" width="0.0170%" height="15" fill="rgb(229,81,49)" fg:x="52852" fg:w="9"/><text x="100.1876%" y="463.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (6 samples, 0.01%)</title><rect x="99.9433%" y="437" width="0.0113%" height="15" fill="rgb(236,28,36)" fg:x="52855" fg:w="6"/><text x="100.1933%" y="447.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (6 samples, 0.01%)</title><rect x="99.9433%" y="421" width="0.0113%" height="15" fill="rgb(249,185,26)" fg:x="52855" fg:w="6"/><text x="100.1933%" y="431.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="99.9546%" y="517" width="0.0227%" height="15" fill="rgb(249,174,33)" fg:x="52861" fg:w="12"/><text x="100.2046%" y="527.50"></text></g><g><title>all (52,885 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="52885"/><text x="0.2500%" y="559.50"></text></g><g><title>onebrc (52,885 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="52885"/><text x="0.2500%" y="543.50">onebrc</text></g><g><title>_start (12 samples, 0.02%)</title><rect x="99.9773%" y="517" width="0.0227%" height="15" fill="rgb(250,127,30)" fg:x="52873" fg:w="12"/><text x="100.2273%" y="527.50"></text></g><g><title>__libc_start_main (12 samples, 0.02%)</title><rect x="99.9773%" y="501" width="0.0227%" height="15" fill="rgb(230,49,44)" fg:x="52873" fg:w="12"/><text x="100.2273%" y="511.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="99.9773%" y="485" width="0.0227%" height="15" fill="rgb(229,67,23)" fg:x="52873" fg:w="12"/><text x="100.2273%" y="495.50"></text></g><g><title>std::rt::lang_start (11 samples, 0.02%)</title><rect x="99.9792%" y="469" width="0.0208%" height="15" fill="rgb(249,83,47)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="479.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 0.02%)</title><rect x="99.9792%" y="453" width="0.0208%" height="15" fill="rgb(215,43,3)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="463.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 0.02%)</title><rect x="99.9792%" y="437" width="0.0208%" height="15" fill="rgb(238,154,13)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="447.50"></text></g><g><title>std::panicking::try (11 samples, 0.02%)</title><rect x="99.9792%" y="421" width="0.0208%" height="15" fill="rgb(219,56,2)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="431.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 0.02%)</title><rect x="99.9792%" y="405" width="0.0208%" height="15" fill="rgb(233,0,4)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="415.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (11 samples, 0.02%)</title><rect x="99.9792%" y="389" width="0.0208%" height="15" fill="rgb(235,30,7)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="399.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 0.02%)</title><rect x="99.9792%" y="373" width="0.0208%" height="15" fill="rgb(250,79,13)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="383.50"></text></g><g><title>std::panicking::try (11 samples, 0.02%)</title><rect x="99.9792%" y="357" width="0.0208%" height="15" fill="rgb(211,146,34)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="367.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 0.02%)</title><rect x="99.9792%" y="341" width="0.0208%" height="15" fill="rgb(228,22,38)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 0.02%)</title><rect x="99.9792%" y="325" width="0.0208%" height="15" fill="rgb(235,168,5)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="335.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11 samples, 0.02%)</title><rect x="99.9792%" y="309" width="0.0208%" height="15" fill="rgb(221,155,16)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="319.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 0.02%)</title><rect x="99.9792%" y="293" width="0.0208%" height="15" fill="rgb(215,215,53)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (11 samples, 0.02%)</title><rect x="99.9792%" y="277" width="0.0208%" height="15" fill="rgb(223,4,10)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="287.50"></text></g><g><title>onebrc::main (11 samples, 0.02%)</title><rect x="99.9792%" y="261" width="0.0208%" height="15" fill="rgb(234,103,6)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="271.50"></text></g><g><title>onebrc::adv::process (11 samples, 0.02%)</title><rect x="99.9792%" y="245" width="0.0208%" height="15" fill="rgb(227,97,0)" fg:x="52874" fg:w="11"/><text x="100.2292%" y="255.50"></text></g><g><title>std::thread::scoped::scope (7 samples, 0.01%)</title><rect x="99.9868%" y="229" width="0.0132%" height="15" fill="rgb(234,150,53)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="239.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.01%)</title><rect x="99.9868%" y="213" width="0.0132%" height="15" fill="rgb(228,201,54)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="223.50"></text></g><g><title>std::panicking::try (7 samples, 0.01%)</title><rect x="99.9868%" y="197" width="0.0132%" height="15" fill="rgb(222,22,37)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="207.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.01%)</title><rect x="99.9868%" y="181" width="0.0132%" height="15" fill="rgb(237,53,32)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7 samples, 0.01%)</title><rect x="99.9868%" y="165" width="0.0132%" height="15" fill="rgb(233,25,53)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="175.50"></text></g><g><title>std::thread::scoped::scope::_{{closure}} (7 samples, 0.01%)</title><rect x="99.9868%" y="149" width="0.0132%" height="15" fill="rgb(210,40,34)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="159.50"></text></g><g><title>onebrc::adv::process::_{{closure}} (7 samples, 0.01%)</title><rect x="99.9868%" y="133" width="0.0132%" height="15" fill="rgb(241,220,44)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="143.50"></text></g><g><title>std::thread::scoped::Scope::spawn (7 samples, 0.01%)</title><rect x="99.9868%" y="117" width="0.0132%" height="15" fill="rgb(235,28,35)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="127.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (7 samples, 0.01%)</title><rect x="99.9868%" y="101" width="0.0132%" height="15" fill="rgb(210,56,17)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="111.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (7 samples, 0.01%)</title><rect x="99.9868%" y="85" width="0.0132%" height="15" fill="rgb(224,130,29)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="95.50"></text></g><g><title>std::sys::unix::thread::Thread::new (7 samples, 0.01%)</title><rect x="99.9868%" y="69" width="0.0132%" height="15" fill="rgb(235,212,8)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="79.50"></text></g><g><title>pthread_create (7 samples, 0.01%)</title><rect x="99.9868%" y="53" width="0.0132%" height="15" fill="rgb(223,33,50)" fg:x="52878" fg:w="7"/><text x="100.2368%" y="63.50"></text></g></svg></svg>